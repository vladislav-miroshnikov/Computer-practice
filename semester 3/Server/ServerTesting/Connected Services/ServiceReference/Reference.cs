//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IServerContract", CallbackContract=typeof(ServiceReference.IServerContractCallback))]
    public interface IServerContract
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerContract/GetListOfFilters", ReplyAction="http://tempuri.org/IServerContract/GetListOfFiltersResponse")]
        System.Collections.Generic.List<string> GetListOfFilters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerContract/GetListOfFilters", ReplyAction="http://tempuri.org/IServerContract/GetListOfFiltersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetListOfFiltersAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerContract/ApplyFilter")]
        void ApplyFilter(byte[] bytes, string filterName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerContract/ApplyFilter")]
        System.Threading.Tasks.Task ApplyFilterAsync(byte[] bytes, string filterName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IServerContractCallback
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerContract/ReturnImage")]
        void ReturnImage(byte[] bmp);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerContract/ReturnProgress")]
        void ReturnProgress(int progress);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IServerContractChannel : ServiceReference.IServerContract, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ServerContractClientBase : System.ServiceModel.DuplexClientBase<ServiceReference.IServerContract>, ServiceReference.IServerContract
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServerContractClientBase(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, ServerContractClientBase.GetDefaultBinding(), ServerContractClientBase.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IServerContract.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServerContractClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, ServerContractClientBase.GetBindingForEndpoint(endpointConfiguration), ServerContractClientBase.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServerContractClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, ServerContractClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServerContractClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, ServerContractClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServerContractClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress)
        {
        }
        
        public System.Collections.Generic.List<string> GetListOfFilters()
        {
            return base.Channel.GetListOfFilters();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetListOfFiltersAsync()
        {
            return base.Channel.GetListOfFiltersAsync();
        }
        
        public void ApplyFilter(byte[] bytes, string filterName)
        {
            base.Channel.ApplyFilter(bytes, filterName);
        }
        
        public System.Threading.Tasks.Task ApplyFilterAsync(byte[] bytes, string filterName)
        {
            return base.Channel.ApplyFilterAsync(bytes, filterName);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IServerContract))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IServerContract))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:5567/srv");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServerContractClientBase.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IServerContract);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServerContractClientBase.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IServerContract);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_IServerContract,
        }
    }
    
    public class ReturnImageReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public ReturnImageReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public byte[] bmp
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    public class ReturnProgressReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public ReturnProgressReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public int progress
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public partial class ServerContractClient : ServerContractClientBase
    {
        
        public ServerContractClient(EndpointConfiguration endpointConfiguration) : 
                this(new ServerContractClientCallback(), endpointConfiguration)
        {
        }
        
        private ServerContractClient(ServerContractClientCallback callbackImpl, EndpointConfiguration endpointConfiguration) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfiguration)
        {
            callbackImpl.Initialize(this);
        }
        
        public ServerContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new ServerContractClientCallback(), binding, remoteAddress)
        {
        }
        
        private ServerContractClient(ServerContractClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress)
        {
            callbackImpl.Initialize(this);
        }
        
        public ServerContractClient() : 
                this(new ServerContractClientCallback())
        {
        }
        
        private ServerContractClient(ServerContractClientCallback callbackImpl) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl))
        {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<ReturnImageReceivedEventArgs> ReturnImageReceived;
        
        public event System.EventHandler<ReturnProgressReceivedEventArgs> ReturnProgressReceived;
        
        private void OnReturnImageReceived(object state)
        {
            if ((this.ReturnImageReceived != null))
            {
                object[] results = ((object[])(state));
                this.ReturnImageReceived(this, new ReturnImageReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnReturnProgressReceived(object state)
        {
            if ((this.ReturnProgressReceived != null))
            {
                object[] results = ((object[])(state));
                this.ReturnProgressReceived(this, new ReturnProgressReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class ServerContractClientCallback : object, IServerContractCallback
        {
            
            private ServerContractClient proxy;
            
            public void Initialize(ServerContractClient proxy)
            {
                this.proxy = proxy;
            }
            
            public void ReturnImage(byte[] bmp)
            {
                this.proxy.OnReturnImageReceived(new object[] {
                            bmp});
            }
            
            public void ReturnProgress(int progress)
            {
                this.proxy.OnReturnProgressReceived(new object[] {
                            progress});
            }
        }
    }
}
